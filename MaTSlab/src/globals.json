{"defs":"declare interface Data {\n  x?: number[];\n  y?: number[];\n}\n\ndeclare type VecOrArray = Vec | number[];\n\ndeclare interface Figure {\n  plot: (x: VecOrArray, y: VecOrArray) => Promise<Data[]>;\n  scatter: (x: VecOrArray, y: VecOrArray) => Promise<Data[]>;\n  area: (x: VecOrArray, y: VecOrArray) => Promise<Data[]>;\n  image: (\n    x: VecOrArray,\n    y: VecOrArray,\n    z: Mat,\n    colormap?: string,\n  ) => Promise<Data[]>;\n}\n\ndeclare class Vec {\n  constructor(arr: number[]);\n  length: number;\n  arr: number[];\n  add(num: number | Vec): Vec;\n  sub(num: number | Vec): Vec;\n  mul(num: number | Vec): Vec;\n  div(num: number | Vec): Vec;\n  map(m: (value: number, i: number) => number): Vec;\n}\n\ndeclare class Mat {\n  constructor(arr: number[][]);\n  size: [number, number];\n  arr: number[][];\n  add(num: number | Mat): Mat;\n  sub(num: number | Mat): Mat;\n  mul(num: number | Mat): Mat;\n  div(num: number | Mat): Mat;\n  map(m: (value: number, i: number, j: number) => number): Mat;\n}\n\ndeclare function withFig(figNum: number, callback: (f: Figure) => void): void;\ndeclare function fig(figNum: number): Figure;\ndeclare function render(element: JSX.Element): void;\ndeclare function linspace(start: number, stop: number, step: number): Vec;\ndeclare function meshgrid(x: VecOrArray, y: VecOrArray): [Mat, Mat];\ndeclare function zeros_like(x: Mat): Mat;\ndeclare function openFile(): Promise<ArrayBuffer>;\n\ndeclare function sin(arr: VecOrArray): Vec;\ndeclare function cos(arr: VecOrArray): Vec;\ndeclare function tan(arr: VecOrArray): Vec;\ndeclare function exp(arr: VecOrArray): Vec;\ndeclare function pow(arr: VecOrArray, power: number): Vec;\n\ntype Fig = typeof fig;\ntype WithFig = typeof withFig;\n\ndeclare interface Globals {\n  fig: Fig;\n  withFig: WithFig;\n}\n"}